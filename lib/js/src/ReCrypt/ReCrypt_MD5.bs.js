// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_bytes = require("bs-platform/lib/js/caml_bytes.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReCrypt_Utils = require("./ReCrypt_Utils.bs.js");
var ReCrypt_Functions_MD = require("./Functions/ReCrypt_Functions_MD.bs.js");

var constants = [
  -680876936,
  -389564586,
  606105819,
  -1044525330,
  -176418897,
  1200080426,
  -1473231341,
  -45705983,
  1770035416,
  -1958414417,
  -42063,
  -1990404162,
  1804603682,
  -40341101,
  -1502002290,
  1236535329,
  -165796510,
  -1069501632,
  643717713,
  -373897302,
  -701558691,
  38016083,
  -660478335,
  -405537848,
  568446438,
  -1019803690,
  -187363961,
  1163531501,
  -1444681467,
  -51403784,
  1735328473,
  -1926607734,
  -378558,
  -2022574463,
  1839030562,
  -35309556,
  -1530992060,
  1272893353,
  -155497632,
  -1094730640,
  681279174,
  -358537222,
  -722521979,
  76029189,
  -640364487,
  -421815835,
  530742520,
  -995338651,
  -198630844,
  1126891415,
  -1416354905,
  -57434055,
  1700485571,
  -1894986606,
  -1051523,
  -2054922799,
  1873313359,
  -30611744,
  -1560198380,
  1309151649,
  -145523070,
  -1120210379,
  718787259,
  -343485551
];

var s = [
  7,
  12,
  17,
  22,
  5,
  9,
  14,
  20,
  4,
  11,
  16,
  23,
  6,
  10,
  15,
  21
];

var initialHash = [
  1732584193,
  -271733879,
  -1732584194,
  271733878
];

function preprocess(msgBytes) {
  var size = (msgBytes.length + 8 | 0) + 1 | 0;
  while(size % 64 !== 0) {
    size = size + 1 | 0;
  };
  var length = msgBytes.length;
  var bytes = Bytes.init(size, (function (index) {
          if (index < length) {
            return Caml_bytes.get(msgBytes, index);
          } else if (index === length) {
            return Char.chr(128);
          } else {
            return Char.chr(0);
          }
        }));
  var va = (length << 3);
  for(var i = 0; i <= 7; ++i){
    bytes[i + (size - 8 | 0) | 0] = Char.chr(va & 255);
    va = (va >>> 8);
  }
  return bytes;
}

function make(message) {
  var messageBytes = Bytes.of_string(message);
  var message$1 = preprocess(messageBytes);
  var chunks = ((message$1.length + 8 | 0) >> 6);
  var a = Caml_array.caml_array_get(initialHash, 0);
  var b = Caml_array.caml_array_get(initialHash, 1);
  var c = Caml_array.caml_array_get(initialHash, 2);
  var d = Caml_array.caml_array_get(initialHash, 3);
  var w = Caml_array.caml_make_vect(16, 0);
  for(var i = 0 ,i_finish = chunks - 1 | 0; i <= i_finish; ++i){
    for(var j = 0; j <= 63; ++j){
      Caml_array.caml_array_set(w, (j >>> 2), (Caml_bytes.get(message$1, (i << 6) + j | 0) << 24) | (Caml_array.caml_array_get(w, (j >>> 2)) >>> 8));
    }
    var originalA = a;
    var originalB = b;
    var originalC = c;
    var originalD = d;
    for(var j$1 = 0; j$1 <= 63; ++j$1){
      var f = 0 <= j$1 && j$1 <= 15 ? b & c | Pervasives.lnot(b) & d : (
          16 <= j$1 && j$1 <= 31 ? b & d | c & Pervasives.lnot(d) : (
              32 <= j$1 && j$1 <= 47 ? b ^ c ^ d : c ^ (b | Pervasives.lnot(d))
            )
        );
      var g = 0 <= j$1 && j$1 <= 15 ? j$1 : (
          16 <= j$1 && j$1 <= 31 ? (Caml_int32.imul(5, j$1) + 1 | 0) % 16 : (
              32 <= j$1 && j$1 <= 47 ? (Caml_int32.imul(3, j$1) + 5 | 0) % 16 : Caml_int32.imul(7, j$1) % 16
            )
        );
      var temp = b + ReCrypt_Functions_MD.rotl(((a + f | 0) + Caml_array.caml_array_get(w, g) | 0) + Caml_array.caml_array_get(constants, j$1) | 0, Caml_array.caml_array_get(s, ((j$1 >>> 4) << 2) | j$1 & 3)) | 0;
      a = d;
      d = c;
      c = b;
      b = temp;
    }
    a = originalA + a | 0;
    b = originalB + b | 0;
    c = originalC + c | 0;
    d = originalD + d | 0;
  }
  var md5 = Bytes.make(16, Char.chr(0));
  ReCrypt_Utils.append(md5, a, 0);
  ReCrypt_Utils.append(md5, b, 4);
  ReCrypt_Utils.append(md5, c, 8);
  ReCrypt_Utils.append(md5, d, 12);
  return ReCrypt_Utils.stringToHex(Bytes.to_string(md5));
}

exports.make = make;
/* No side effect */
