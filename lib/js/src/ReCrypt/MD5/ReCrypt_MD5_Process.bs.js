// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_bytes = require("bs-platform/lib/js/caml_bytes.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReCrypt_Utils = require("../ReCrypt_Utils.bs.js");
var ReCrypt_Functions_MD = require("../Functions/ReCrypt_Functions_MD.bs.js");
var ReCrypt_MD5_Constants = require("./ReCrypt_MD5_Constants.bs.js");

function make(message) {
  var chunks = ((message.length + 8 | 0) >> 6);
  var a = Caml_array.caml_array_get(ReCrypt_MD5_Constants.initialHash, 0);
  var b = Caml_array.caml_array_get(ReCrypt_MD5_Constants.initialHash, 1);
  var c = Caml_array.caml_array_get(ReCrypt_MD5_Constants.initialHash, 2);
  var d = Caml_array.caml_array_get(ReCrypt_MD5_Constants.initialHash, 3);
  var w = Caml_array.caml_make_vect(16, 0);
  for(var i = 0 ,i_finish = chunks - 1 | 0; i <= i_finish; ++i){
    for(var j = 0; j <= 63; ++j){
      Caml_array.caml_array_set(w, (j >>> 2), (Caml_bytes.get(message, (i << 6) + j | 0) << 24) | (Caml_array.caml_array_get(w, (j >>> 2)) >>> 8));
    }
    var originalA = a;
    var originalB = b;
    var originalC = c;
    var originalD = d;
    for(var j$1 = 0; j$1 <= 63; ++j$1){
      var f = 0 <= j$1 && j$1 <= 15 ? b & c | Pervasives.lnot(b) & d : (
          16 <= j$1 && j$1 <= 31 ? b & d | c & Pervasives.lnot(d) : (
              32 <= j$1 && j$1 <= 47 ? b ^ c ^ d : c ^ (b | Pervasives.lnot(d))
            )
        );
      var g = 0 <= j$1 && j$1 <= 15 ? j$1 : (
          16 <= j$1 && j$1 <= 31 ? (Caml_int32.imul(5, j$1) + 1 | 0) % 16 : (
              32 <= j$1 && j$1 <= 47 ? (Caml_int32.imul(3, j$1) + 5 | 0) % 16 : Caml_int32.imul(7, j$1) % 16
            )
        );
      var temp = b + ReCrypt_Functions_MD.rotl(((a + f | 0) + Caml_array.caml_array_get(w, g) | 0) + Caml_array.caml_array_get(ReCrypt_MD5_Constants.k, j$1) | 0, Caml_array.caml_array_get(ReCrypt_MD5_Constants.s, ((j$1 >>> 4) << 2) | j$1 & 3)) | 0;
      a = d;
      d = c;
      c = b;
      b = temp;
    }
    a = originalA + a | 0;
    b = originalB + b | 0;
    c = originalC + c | 0;
    d = originalD + d | 0;
  }
  var md5 = Bytes.make(16, Char.chr(0));
  ReCrypt_Utils.append(md5, a, 0);
  ReCrypt_Utils.append(md5, b, 4);
  ReCrypt_Utils.append(md5, c, 8);
  ReCrypt_Utils.append(md5, d, 12);
  return ReCrypt_Utils.stringToHex(Bytes.to_string(md5));
}

exports.make = make;
/* No side effect */
