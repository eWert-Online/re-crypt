// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Int64 = require("bs-platform/lib/js/int64.js");
var Caml_int64 = require("bs-platform/lib/js/caml_int64.js");

function rotr(x, n) {
  return Caml_int64.or_(Caml_int64.lsr_(x, n), Caml_int64.lsl_(x, 64 - n | 0));
}

function change(x, y, z) {
  return Caml_int64.xor(Caml_int64.and_(x, y), Caml_int64.and_(Int64.lognot(x), z));
}

function majority(x, y, z) {
  return Caml_int64.xor(Caml_int64.xor(Caml_int64.and_(x, y), Caml_int64.and_(x, z)), Caml_int64.and_(y, z));
}

function sum0(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr(x, 2), rotr(x, 13)), rotr(x, 22));
}

function sum1(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr(x, 6), rotr(x, 11)), rotr(x, 25));
}

function sigma0(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr(x, 7), rotr(x, 18)), Caml_int64.lsr_(x, 3));
}

function sigma1(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr(x, 17), rotr(x, 19)), Caml_int64.lsr_(x, 10));
}

var Sha256 = {
  sum0: sum0,
  sum1: sum1,
  sigma0: sigma0,
  sigma1: sigma1
};

function sum0$1(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr(x, 28), rotr(x, 34)), rotr(x, 39));
}

function sum1$1(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr(x, 14), rotr(x, 18)), rotr(x, 41));
}

function sigma0$1(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr(x, 1), rotr(x, 8)), Caml_int64.lsr_(x, 7));
}

function sigma1$1(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr(x, 19), rotr(x, 61)), Caml_int64.lsr_(x, 6));
}

var Sha512 = {
  sum0: sum0$1,
  sum1: sum1$1,
  sigma0: sigma0$1,
  sigma1: sigma1$1
};

exports.rotr = rotr;
exports.change = change;
exports.majority = majority;
exports.Sha256 = Sha256;
exports.Sha512 = Sha512;
/* No side effect */
