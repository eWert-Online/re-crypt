// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Int32 = require("bs-platform/lib/js/int32.js");
var Int64 = require("bs-platform/lib/js/int64.js");
var Caml_int64 = require("bs-platform/lib/js/caml_int64.js");

function rotr(x, n) {
  return (x >>> n) | 0 | (x << (64 - n | 0));
}

function change(x, y, z) {
  return x & y ^ Int32.lognot(x) & z;
}

function majority(x, y, z) {
  return x & y ^ x & z ^ y & z;
}

function parity(x, y, z) {
  return x ^ y ^ z;
}

function sum0(x) {
  return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);
}

function sum1(x) {
  return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);
}

function sigma0(x) {
  return rotr(x, 7) ^ rotr(x, 18) ^ (x >>> 3);
}

function sigma1(x) {
  return rotr(x, 17) ^ rotr(x, 19) ^ (x >>> 10);
}

var Sha224_256 = {
  rotr: rotr,
  change: change,
  majority: majority,
  parity: parity,
  sum0: sum0,
  sum1: sum1,
  sigma0: sigma0,
  sigma1: sigma1
};

function rotr$1(x, n) {
  return Caml_int64.or_(Caml_int64.lsr_(x, n), Caml_int64.lsl_(x, 64 - n | 0));
}

function change$1(x, y, z) {
  return Caml_int64.xor(Caml_int64.and_(x, y), Caml_int64.and_(Int64.lognot(x), z));
}

function majority$1(x, y, z) {
  return Caml_int64.xor(Caml_int64.xor(Caml_int64.and_(x, y), Caml_int64.and_(x, z)), Caml_int64.and_(y, z));
}

function sum0$1(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr$1(x, 28), rotr$1(x, 34)), rotr$1(x, 39));
}

function sum1$1(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr$1(x, 14), rotr$1(x, 18)), rotr$1(x, 41));
}

function sigma0$1(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr$1(x, 1), rotr$1(x, 8)), Caml_int64.lsr_(x, 7));
}

function sigma1$1(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr$1(x, 19), rotr$1(x, 61)), Caml_int64.lsr_(x, 6));
}

var Sha384_512 = {
  rotr: rotr$1,
  change: change$1,
  majority: majority$1,
  sum0: sum0$1,
  sum1: sum1$1,
  sigma0: sigma0$1,
  sigma1: sigma1$1
};

exports.Sha224_256 = Sha224_256;
exports.Sha384_512 = Sha384_512;
/* No side effect */
