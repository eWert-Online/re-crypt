// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int64 = require("bs-platform/lib/js/caml_int64.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var ReCrypt_Utils = require("../ReCrypt_Utils.bs.js");
var ReCrypt_Functions_SHA2 = require("../Functions/ReCrypt_Functions_SHA2.bs.js");
var ReCrypt_Sha512_Constants = require("./ReCrypt_Sha512_Constants.bs.js");

function make(message) {
  var chunks = message.length / 128 | 0;
  var a = {
    contents: Caml_int64.mk(-205731576, 1779033703)
  };
  var b = {
    contents: Caml_int64.mk(-2067093701, -1150833019)
  };
  var c = {
    contents: Caml_int64.mk(-23791573, 1013904242)
  };
  var d = {
    contents: Caml_int64.mk(1595750129, -1521486534)
  };
  var e = {
    contents: Caml_int64.mk(-1377402159, 1359893119)
  };
  var f = {
    contents: Caml_int64.mk(725511199, -1694144372)
  };
  var g = {
    contents: Caml_int64.mk(-79577749, 528734635)
  };
  var h = {
    contents: Caml_int64.mk(327033209, 1541459225)
  };
  for(var i = 0; i < chunks; ++i){
    var w = Belt_Array.make(80, Caml_int64.zero);
    for(var t = 0; t <= 15; ++t){
      for(var j = 0; j <= 7; ++j){
        var result = Caml_int64.add(Caml_int64.lsl_(Belt_Option.getWithDefault(Belt_Array.get(w, t), Caml_int64.zero), 8), Caml_int64.of_int32(Belt_Option.getWithDefault(Belt_Array.get(message, j + ((i << 7) + (t << 3) | 0) | 0), 0) & 255));
        Belt_Array.set(w, t, result);
      }
    }
    for(var t$1 = 16; t$1 <= 79; ++t$1){
      var t2 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 2 | 0), Caml_int64.zero);
      var t7 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 7 | 0), Caml_int64.zero);
      var t15 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 15 | 0), Caml_int64.zero);
      var t16 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 16 | 0), Caml_int64.zero);
      var result$1 = Caml_int64.add(Caml_int64.add(Caml_int64.add(ReCrypt_Functions_SHA2.Int64.sigma1(t2), t7), ReCrypt_Functions_SHA2.Int64.sigma0(t15)), t16);
      Belt_Array.set(w, t$1, result$1);
    }
    var originalA = a.contents;
    var originalB = b.contents;
    var originalC = c.contents;
    var originalD = d.contents;
    var originalE = e.contents;
    var originalF = f.contents;
    var originalG = g.contents;
    var originalH = h.contents;
    Belt_Array.forEachWithIndex(ReCrypt_Sha512_Constants.k, (function(w){
        return function (t, k) {
          var temp1 = Caml_int64.add(Caml_int64.add(Caml_int64.add(Caml_int64.add(h.contents, ReCrypt_Functions_SHA2.Int64.sum1(e.contents)), ReCrypt_Functions_SHA2.Int64.change(e.contents, f.contents, g.contents)), k), Belt_Option.getWithDefault(Belt_Array.get(w, t), Caml_int64.zero));
          var temp2 = Caml_int64.add(ReCrypt_Functions_SHA2.Int64.sum0(a.contents), ReCrypt_Functions_SHA2.Int64.majority(a.contents, b.contents, c.contents));
          h.contents = g.contents;
          g.contents = f.contents;
          f.contents = e.contents;
          e.contents = Caml_int64.add(d.contents, temp1);
          d.contents = c.contents;
          c.contents = b.contents;
          b.contents = a.contents;
          a.contents = Caml_int64.add(temp1, temp2);
          
        }
        }(w)));
    a.contents = Caml_int64.add(originalA, a.contents);
    b.contents = Caml_int64.add(originalB, b.contents);
    c.contents = Caml_int64.add(originalC, c.contents);
    d.contents = Caml_int64.add(originalD, d.contents);
    e.contents = Caml_int64.add(originalE, e.contents);
    f.contents = Caml_int64.add(originalF, f.contents);
    g.contents = Caml_int64.add(originalG, g.contents);
    h.contents = Caml_int64.add(originalH, h.contents);
  }
  return ReCrypt_Utils.stringToHex(Belt_Array.reduce(ReCrypt_Utils.append64(ReCrypt_Utils.append64(ReCrypt_Utils.append64(ReCrypt_Utils.append64(ReCrypt_Utils.append64(ReCrypt_Utils.append64(ReCrypt_Utils.append64(ReCrypt_Utils.append64(Belt_Array.make(64, 0), a.contents, 0), b.contents, 8), c.contents, 16), d.contents, 24), e.contents, 32), f.contents, 40), g.contents, 48), h.contents, 56), "", (function (acc, curr) {
                    return acc + String.fromCharCode(curr);
                  })));
}

exports.make = make;
/* No side effect */
