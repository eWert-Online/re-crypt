// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_int64 = require("bs-platform/lib/js/caml_int64.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function append(hash, value, offset) {
  for(var j = 0; j <= 3; ++j){
    hash[j + offset | 0] = Char.chr((value >>> (j << 3)) & 255);
  }
  return /* () */0;
}

function append32(hash, value, offset) {
  for(var j = 0; j <= 3; ++j){
    hash[j + offset | 0] = Char.chr((value >>> (24 - (j << 3) | 0)) & 255);
  }
  return /* () */0;
}

function append64(hash, value, offset) {
  for(var j = 0; j <= 7; ++j){
    hash[j + offset | 0] = Char.chr(Caml_int64.to_int32(Caml_int64.and_(Caml_int64.lsr_(value, 56 - (j << 3) | 0), /* int64 */[
                  /* hi */0,
                  /* lo */255
                ])));
  }
  return /* () */0;
}

function stringToHex(input) {
  var hex = "0123456789abcdef";
  var length = input.length;
  return $$String.init((length << 1), (function (index) {
                var $$char = Caml_string.get(input, index / 2 | 0);
                if (index % 2 === 0) {
                  return Caml_string.get(hex, ($$char >>> 4) & 15);
                } else {
                  return Caml_string.get(hex, $$char & 15);
                }
              }));
}

exports.append = append;
exports.append32 = append32;
exports.append64 = append64;
exports.stringToHex = stringToHex;
/* No side effect */
