// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Int32 = require("bs-platform/lib/js/int32.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReCrypt_Utils = require("../ReCrypt_Utils.bs.js");
var ReCrypt_Functions_SHA1 = require("../Functions/ReCrypt_Functions_SHA1.bs.js");
var ReCrypt_Sha1_Constants = require("./ReCrypt_Sha1_Constants.bs.js");

function make(message) {
  var chunks = ((message.length + 8 | 0) >> 6);
  var a = Caml_array.caml_array_get(ReCrypt_Sha1_Constants.initialHash, 0);
  var b = Caml_array.caml_array_get(ReCrypt_Sha1_Constants.initialHash, 1);
  var c = Caml_array.caml_array_get(ReCrypt_Sha1_Constants.initialHash, 2);
  var d = Caml_array.caml_array_get(ReCrypt_Sha1_Constants.initialHash, 3);
  var e = Caml_array.caml_array_get(ReCrypt_Sha1_Constants.initialHash, 4);
  for(var i = 0 ,i_finish = chunks - 1 | 0; i <= i_finish; ++i){
    var w = Caml_array.caml_make_vect(80, Int32.zero);
    for(var t = 0; t <= 15; ++t){
      Caml_array.caml_array_set(w, t, (message[(i << 6) + (t << 2) | 0] << 24) & -16777216);
      Caml_array.caml_array_set(w, t, Caml_array.caml_array_get(w, t) | (message[((i << 6) + (t << 2) | 0) + 1 | 0] << 16) & 16711680);
      Caml_array.caml_array_set(w, t, Caml_array.caml_array_get(w, t) | (message[((i << 6) + (t << 2) | 0) + 2 | 0] << 8) & 65280 | message[((i << 6) + (t << 2) | 0) + 3 | 0] & 255);
    }
    for(var t$1 = 16; t$1 <= 79; ++t$1){
      Caml_array.caml_array_set(w, t$1, ReCrypt_Functions_SHA1.rotl(Caml_array.caml_array_get(w, t$1 - 3 | 0) ^ Caml_array.caml_array_get(w, t$1 - 8 | 0) ^ Caml_array.caml_array_get(w, t$1 - 14 | 0) ^ Caml_array.caml_array_get(w, t$1 - 16 | 0), 1));
    }
    var originalA = a;
    var originalB = b;
    var originalC = c;
    var originalD = d;
    var originalE = e;
    for(var t$2 = 0; t$2 <= 79; ++t$2){
      var temp = (((ReCrypt_Functions_SHA1.rotl(a, 5) + ReCrypt_Functions_SHA1.f(t$2, b, c, d) | 0) + e | 0) + ReCrypt_Sha1_Constants.k(t$2) | 0) + Caml_array.caml_array_get(w, t$2) | 0;
      e = d;
      d = c;
      c = ReCrypt_Functions_SHA1.rotl(b, 30);
      b = a;
      a = temp;
    }
    a = originalA + a | 0;
    b = originalB + b | 0;
    c = originalC + c | 0;
    d = originalD + d | 0;
    e = originalE + e | 0;
  }
  var sha1raw = Bytes.make(20, Char.chr(0));
  ReCrypt_Utils.append32(sha1raw, a, 0);
  ReCrypt_Utils.append32(sha1raw, b, 4);
  ReCrypt_Utils.append32(sha1raw, c, 8);
  ReCrypt_Utils.append32(sha1raw, d, 12);
  ReCrypt_Utils.append32(sha1raw, e, 16);
  return ReCrypt_Utils.stringToHex(Bytes.to_string(sha1raw));
}

exports.make = make;
/* No side effect */
