// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var ReCrypt_Utils = require("../ReCrypt_Utils.bs.js");
var ReCrypt_Functions_SHA1 = require("../Functions/ReCrypt_Functions_SHA1.bs.js");
var ReCrypt_Sha1_Constants = require("./ReCrypt_Sha1_Constants.bs.js");

function make(message) {
  var chunks = ((message.length + 8 | 0) >> 6);
  var a = {
    contents: 1732584193
  };
  var b = {
    contents: -271733879
  };
  var c = {
    contents: -1732584194
  };
  var d = {
    contents: 271733878
  };
  var e = {
    contents: -1009589776
  };
  for(var i = 0; i < chunks; ++i){
    var w = Belt_Array.make(80, 0);
    for(var t = 0; t <= 15; ++t){
      var result = (Belt_Option.getWithDefault(Belt_Array.get(message, (i << 6) + (t << 2) | 0), 0) << 24) & -16777216 | (Belt_Option.getWithDefault(Belt_Array.get(message, ((i << 6) + (t << 2) | 0) + 1 | 0), 0) << 16) & 16711680 | (Belt_Option.getWithDefault(Belt_Array.get(message, ((i << 6) + (t << 2) | 0) + 2 | 0), 0) << 8) & 65280 | Belt_Option.getWithDefault(Belt_Array.get(message, ((i << 6) + (t << 2) | 0) + 3 | 0), 0) & 255;
      Belt_Array.set(w, t, result);
    }
    for(var t$1 = 16; t$1 <= 79; ++t$1){
      var t3 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 3 | 0), 0);
      var t8 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 8 | 0), 0);
      var t14 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 14 | 0), 0);
      var t16 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 16 | 0), 0);
      var result$1 = ReCrypt_Functions_SHA1.rotl(t3 ^ t8 ^ t14 ^ t16, 1);
      Belt_Array.set(w, t$1, result$1);
    }
    var originalA = a.contents;
    var originalB = b.contents;
    var originalC = c.contents;
    var originalD = d.contents;
    var originalE = e.contents;
    Belt_Array.forEachWithIndex(ReCrypt_Sha1_Constants.k, (function(w){
        return function (t, k) {
          var temp = (((ReCrypt_Functions_SHA1.rotl(a.contents, 5) + ReCrypt_Functions_SHA1.f(t, b.contents, c.contents, d.contents) | 0) + e.contents | 0) + k | 0) + Belt_Option.getWithDefault(Belt_Array.get(w, t), 0) | 0;
          e.contents = d.contents;
          d.contents = c.contents;
          c.contents = ReCrypt_Functions_SHA1.rotl(b.contents, 30);
          b.contents = a.contents;
          a.contents = temp;
          
        }
        }(w)));
    a.contents = originalA + a.contents | 0;
    b.contents = originalB + b.contents | 0;
    c.contents = originalC + c.contents | 0;
    d.contents = originalD + d.contents | 0;
    e.contents = originalE + e.contents | 0;
  }
  return ReCrypt_Utils.stringToHex(Belt_Array.reduce(ReCrypt_Utils.append32(ReCrypt_Utils.append32(ReCrypt_Utils.append32(ReCrypt_Utils.append32(ReCrypt_Utils.append32(Belt_Array.make(20, 0), a.contents, 0), b.contents, 4), c.contents, 8), d.contents, 12), e.contents, 16), "", (function (acc, curr) {
                    return acc + String.fromCharCode(curr);
                  })));
}

exports.make = make;
/* No side effect */
