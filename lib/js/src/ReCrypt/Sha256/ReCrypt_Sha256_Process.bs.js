// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var ReCrypt_Utils = require("../ReCrypt_Utils.bs.js");
var ReCrypt_Functions_SHA2 = require("../Functions/ReCrypt_Functions_SHA2.bs.js");
var ReCrypt_Sha256_Constants = require("./ReCrypt_Sha256_Constants.bs.js");

function make(message) {
  var chunks = ((message.length + 8 | 0) >> 6);
  var a = {
    contents: 1779033703
  };
  var b = {
    contents: -1150833019
  };
  var c = {
    contents: 1013904242
  };
  var d = {
    contents: -1521486534
  };
  var e = {
    contents: 1359893119
  };
  var f = {
    contents: -1694144372
  };
  var g = {
    contents: 528734635
  };
  var h = {
    contents: 1541459225
  };
  for(var i = 0; i < chunks; ++i){
    var w = Belt_Array.make(64, 0);
    for(var t = 0; t <= 15; ++t){
      var result = (message[(i << 6) + (t << 2) | 0] << 24) & -16777216 | (message[((i << 6) + (t << 2) | 0) + 1 | 0] << 16) & 16711680 | (message[((i << 6) + (t << 2) | 0) + 2 | 0] << 8) & 65280 | message[((i << 6) + (t << 2) | 0) + 3 | 0] & 255;
      Belt_Array.set(w, t, result);
    }
    for(var t$1 = 16; t$1 <= 63; ++t$1){
      var t2 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 2 | 0), 0);
      var t7 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 7 | 0), 0);
      var t15 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 15 | 0), 0);
      var t16 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 16 | 0), 0);
      var result$1 = ((ReCrypt_Functions_SHA2.Int32.sigma1(t2) + t7 | 0) + ReCrypt_Functions_SHA2.Int32.sigma0(t15) | 0) + t16 | 0;
      Belt_Array.set(w, t$1, result$1);
    }
    var originalA = a.contents;
    var originalB = b.contents;
    var originalC = c.contents;
    var originalD = d.contents;
    var originalE = e.contents;
    var originalF = f.contents;
    var originalG = g.contents;
    var originalH = h.contents;
    Belt_Array.forEachWithIndex(ReCrypt_Sha256_Constants.k, (function(w){
        return function (t, k) {
          var temp1 = (((h.contents + ReCrypt_Functions_SHA2.Int32.sum1(e.contents) | 0) + ReCrypt_Functions_SHA2.Int32.change(e.contents, f.contents, g.contents) | 0) + k | 0) + Belt_Option.getWithDefault(Belt_Array.get(w, t), 0) | 0;
          var temp2 = ReCrypt_Functions_SHA2.Int32.sum0(a.contents) + ReCrypt_Functions_SHA2.Int32.majority(a.contents, b.contents, c.contents) | 0;
          h.contents = g.contents;
          g.contents = f.contents;
          f.contents = e.contents;
          e.contents = d.contents + temp1 | 0;
          d.contents = c.contents;
          c.contents = b.contents;
          b.contents = a.contents;
          a.contents = temp1 + temp2 | 0;
          
        }
        }(w)));
    a.contents = originalA + a.contents | 0;
    b.contents = originalB + b.contents | 0;
    c.contents = originalC + c.contents | 0;
    d.contents = originalD + d.contents | 0;
    e.contents = originalE + e.contents | 0;
    f.contents = originalF + f.contents | 0;
    g.contents = originalG + g.contents | 0;
    h.contents = originalH + h.contents | 0;
  }
  return ReCrypt_Utils.stringToHex(Belt_Array.reduce(ReCrypt_Utils.append32(ReCrypt_Utils.append32(ReCrypt_Utils.append32(ReCrypt_Utils.append32(ReCrypt_Utils.append32(ReCrypt_Utils.append32(ReCrypt_Utils.append32(ReCrypt_Utils.append32(Belt_Array.make(32, 0), a.contents, 0), b.contents, 4), c.contents, 8), d.contents, 12), e.contents, 16), f.contents, 20), g.contents, 24), h.contents, 28), "", (function (acc, curr) {
                    return acc + String.fromCharCode(curr);
                  })));
}

exports.make = make;
/* No side effect */
