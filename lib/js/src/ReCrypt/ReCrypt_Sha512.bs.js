// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Int64 = require("bs-platform/lib/js/int64.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int64 = require("bs-platform/lib/js/caml_int64.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var ReCrypt_Utils = require("./ReCrypt_Utils.bs.js");
var ReCrypt_Constants = require("./ReCrypt_Constants.bs.js");
var ReCrypt_Functions = require("./ReCrypt_Functions.bs.js");
var ReCrypt_Preprocess = require("./ReCrypt_Preprocess.bs.js");

var initialHash = [
  Caml_format.caml_int64_of_string("0x6a09e667f3bcc908"),
  Caml_format.caml_int64_of_string("0xbb67ae8584caa73b"),
  Caml_format.caml_int64_of_string("0x3c6ef372fe94f82b"),
  Caml_format.caml_int64_of_string("0xa54ff53a5f1d36f1"),
  Caml_format.caml_int64_of_string("0x510e527fade682d1"),
  Caml_format.caml_int64_of_string("0x9b05688c2b3e6c1f"),
  Caml_format.caml_int64_of_string("0x1f83d9abfb41bd6b"),
  Caml_format.caml_int64_of_string("0x5be0cd19137e2179")
];

function make(message) {
  var messageBytes = Bytes.of_string(message);
  var message$1 = ReCrypt_Preprocess.Sha512.pad(messageBytes);
  var chunks = message$1.length / 128 | 0;
  var a = Caml_array.caml_array_get(initialHash, 0);
  var b = Caml_array.caml_array_get(initialHash, 1);
  var c = Caml_array.caml_array_get(initialHash, 2);
  var d = Caml_array.caml_array_get(initialHash, 3);
  var e = Caml_array.caml_array_get(initialHash, 4);
  var f = Caml_array.caml_array_get(initialHash, 5);
  var g = Caml_array.caml_array_get(initialHash, 6);
  var h = Caml_array.caml_array_get(initialHash, 7);
  for(var i = 0 ,i_finish = chunks - 1 | 0; i <= i_finish; ++i){
    var w = Caml_array.caml_make_vect(80, Int64.zero);
    for(var t = 0; t <= 15; ++t){
      Caml_array.caml_array_set(w, t, ReCrypt_Utils.int64_of_bytes(message$1, (i << 7) + (t << 3) | 0));
    }
    for(var t$1 = 16; t$1 <= 79; ++t$1){
      Caml_array.caml_array_set(w, t$1, Caml_int64.add(Caml_int64.add(Caml_int64.add(ReCrypt_Functions.Sha512.sigma1(Caml_array.caml_array_get(w, t$1 - 2 | 0)), Caml_array.caml_array_get(w, t$1 - 7 | 0)), ReCrypt_Functions.Sha512.sigma0(Caml_array.caml_array_get(w, t$1 - 15 | 0))), Caml_array.caml_array_get(w, t$1 - 16 | 0)));
    }
    var originalA = a;
    var originalB = b;
    var originalC = c;
    var originalD = d;
    var originalE = e;
    var originalF = f;
    var originalG = g;
    var originalH = h;
    for(var t$2 = 0; t$2 <= 79; ++t$2){
      var temp1 = Caml_int64.add(Caml_int64.add(Caml_int64.add(Caml_int64.add(h, ReCrypt_Functions.Sha512.sum1(e)), ReCrypt_Functions.change(e, f, g)), Caml_array.caml_array_get(ReCrypt_Constants.sha512, t$2)), Caml_array.caml_array_get(w, t$2));
      var temp2 = Caml_int64.add(ReCrypt_Functions.Sha512.sum0(a), ReCrypt_Functions.majority(a, b, c));
      h = g;
      g = f;
      f = e;
      e = Caml_int64.add(d, temp1);
      d = c;
      c = b;
      b = a;
      a = Caml_int64.add(temp1, temp2);
    }
    a = Caml_int64.add(originalA, a);
    b = Caml_int64.add(originalB, b);
    c = Caml_int64.add(originalC, c);
    d = Caml_int64.add(originalD, d);
    e = Caml_int64.add(originalE, e);
    f = Caml_int64.add(originalF, f);
    g = Caml_int64.add(originalG, g);
    h = Caml_int64.add(originalH, h);
  }
  var sha512raw = Bytes.make(64, Char.chr(0));
  ReCrypt_Utils.append(sha512raw, a, 0);
  ReCrypt_Utils.append(sha512raw, b, 8);
  ReCrypt_Utils.append(sha512raw, c, 16);
  ReCrypt_Utils.append(sha512raw, d, 24);
  ReCrypt_Utils.append(sha512raw, e, 32);
  ReCrypt_Utils.append(sha512raw, f, 40);
  ReCrypt_Utils.append(sha512raw, g, 48);
  ReCrypt_Utils.append(sha512raw, h, 56);
  return ReCrypt_Utils.stringToHex(Bytes.to_string(sha512raw));
}

exports.make = make;
/* initialHash Not a pure module */
