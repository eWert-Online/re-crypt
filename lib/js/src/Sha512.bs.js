// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Int64 = require("bs-platform/lib/js/int64.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_bytes = require("bs-platform/lib/js/caml_bytes.js");
var Caml_int64 = require("bs-platform/lib/js/caml_int64.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function rotr(x, n) {
  return Caml_int64.or_(Caml_int64.lsr_(x, n), Caml_int64.lsl_(x, 64 - n | 0));
}

function sum0(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr(x, 28), rotr(x, 34)), rotr(x, 39));
}

function sum1(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr(x, 14), rotr(x, 18)), rotr(x, 41));
}

function sigma0(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr(x, 1), rotr(x, 8)), Caml_int64.lsr_(x, 7));
}

function sigma1(x) {
  return Caml_int64.xor(Caml_int64.xor(rotr(x, 19), rotr(x, 61)), Caml_int64.lsr_(x, 6));
}

function change(x, y, z) {
  return Caml_int64.xor(Caml_int64.and_(x, y), Caml_int64.and_(Int64.lognot(x), z));
}

function majority(x, y, z) {
  return Caml_int64.xor(Caml_int64.xor(Caml_int64.and_(x, y), Caml_int64.and_(x, z)), Caml_int64.and_(y, z));
}

var words = /* array */[
  Caml_format.caml_int64_of_string("0x428a2f98d728ae22"),
  Caml_format.caml_int64_of_string("0x7137449123ef65cd"),
  Caml_format.caml_int64_of_string("0xb5c0fbcfec4d3b2f"),
  Caml_format.caml_int64_of_string("0xe9b5dba58189dbbc"),
  Caml_format.caml_int64_of_string("0x3956c25bf348b538"),
  Caml_format.caml_int64_of_string("0x59f111f1b605d019"),
  Caml_format.caml_int64_of_string("0x923f82a4af194f9b"),
  Caml_format.caml_int64_of_string("0xab1c5ed5da6d8118"),
  Caml_format.caml_int64_of_string("0xd807aa98a3030242"),
  Caml_format.caml_int64_of_string("0x12835b0145706fbe"),
  Caml_format.caml_int64_of_string("0x243185be4ee4b28c"),
  Caml_format.caml_int64_of_string("0x550c7dc3d5ffb4e2"),
  Caml_format.caml_int64_of_string("0x72be5d74f27b896f"),
  Caml_format.caml_int64_of_string("0x80deb1fe3b1696b1"),
  Caml_format.caml_int64_of_string("0x9bdc06a725c71235"),
  Caml_format.caml_int64_of_string("0xc19bf174cf692694"),
  Caml_format.caml_int64_of_string("0xe49b69c19ef14ad2"),
  Caml_format.caml_int64_of_string("0xefbe4786384f25e3"),
  Caml_format.caml_int64_of_string("0x0fc19dc68b8cd5b5"),
  Caml_format.caml_int64_of_string("0x240ca1cc77ac9c65"),
  Caml_format.caml_int64_of_string("0x2de92c6f592b0275"),
  Caml_format.caml_int64_of_string("0x4a7484aa6ea6e483"),
  Caml_format.caml_int64_of_string("0x5cb0a9dcbd41fbd4"),
  Caml_format.caml_int64_of_string("0x76f988da831153b5"),
  Caml_format.caml_int64_of_string("0x983e5152ee66dfab"),
  Caml_format.caml_int64_of_string("0xa831c66d2db43210"),
  Caml_format.caml_int64_of_string("0xb00327c898fb213f"),
  Caml_format.caml_int64_of_string("0xbf597fc7beef0ee4"),
  Caml_format.caml_int64_of_string("0xc6e00bf33da88fc2"),
  Caml_format.caml_int64_of_string("0xd5a79147930aa725"),
  Caml_format.caml_int64_of_string("0x06ca6351e003826f"),
  Caml_format.caml_int64_of_string("0x142929670a0e6e70"),
  Caml_format.caml_int64_of_string("0x27b70a8546d22ffc"),
  Caml_format.caml_int64_of_string("0x2e1b21385c26c926"),
  Caml_format.caml_int64_of_string("0x4d2c6dfc5ac42aed"),
  Caml_format.caml_int64_of_string("0x53380d139d95b3df"),
  Caml_format.caml_int64_of_string("0x650a73548baf63de"),
  Caml_format.caml_int64_of_string("0x766a0abb3c77b2a8"),
  Caml_format.caml_int64_of_string("0x81c2c92e47edaee6"),
  Caml_format.caml_int64_of_string("0x92722c851482353b"),
  Caml_format.caml_int64_of_string("0xa2bfe8a14cf10364"),
  Caml_format.caml_int64_of_string("0xa81a664bbc423001"),
  Caml_format.caml_int64_of_string("0xc24b8b70d0f89791"),
  Caml_format.caml_int64_of_string("0xc76c51a30654be30"),
  Caml_format.caml_int64_of_string("0xd192e819d6ef5218"),
  Caml_format.caml_int64_of_string("0xd69906245565a910"),
  Caml_format.caml_int64_of_string("0xf40e35855771202a"),
  Caml_format.caml_int64_of_string("0x106aa07032bbd1b8"),
  Caml_format.caml_int64_of_string("0x19a4c116b8d2d0c8"),
  Caml_format.caml_int64_of_string("0x1e376c085141ab53"),
  Caml_format.caml_int64_of_string("0x2748774cdf8eeb99"),
  Caml_format.caml_int64_of_string("0x34b0bcb5e19b48a8"),
  Caml_format.caml_int64_of_string("0x391c0cb3c5c95a63"),
  Caml_format.caml_int64_of_string("0x4ed8aa4ae3418acb"),
  Caml_format.caml_int64_of_string("0x5b9cca4f7763e373"),
  Caml_format.caml_int64_of_string("0x682e6ff3d6b2b8a3"),
  Caml_format.caml_int64_of_string("0x748f82ee5defb2fc"),
  Caml_format.caml_int64_of_string("0x78a5636f43172f60"),
  Caml_format.caml_int64_of_string("0x84c87814a1f0ab72"),
  Caml_format.caml_int64_of_string("0x8cc702081a6439ec"),
  Caml_format.caml_int64_of_string("0x90befffa23631e28"),
  Caml_format.caml_int64_of_string("0xa4506cebde82bde9"),
  Caml_format.caml_int64_of_string("0xbef9a3f7b2c67915"),
  Caml_format.caml_int64_of_string("0xc67178f2e372532b"),
  Caml_format.caml_int64_of_string("0xca273eceea26619c"),
  Caml_format.caml_int64_of_string("0xd186b8c721c0c207"),
  Caml_format.caml_int64_of_string("0xeada7dd6cde0eb1e"),
  Caml_format.caml_int64_of_string("0xf57d4f7fee6ed178"),
  Caml_format.caml_int64_of_string("0x06f067aa72176fba"),
  Caml_format.caml_int64_of_string("0x0a637dc5a2c898a6"),
  Caml_format.caml_int64_of_string("0x113f9804bef90dae"),
  Caml_format.caml_int64_of_string("0x1b710b35131c471b"),
  Caml_format.caml_int64_of_string("0x28db77f523047d84"),
  Caml_format.caml_int64_of_string("0x32caab7b40c72493"),
  Caml_format.caml_int64_of_string("0x3c9ebe0a15c9bebc"),
  Caml_format.caml_int64_of_string("0x431d67c49c100d4c"),
  Caml_format.caml_int64_of_string("0x4cc5d4becb3e42b6"),
  Caml_format.caml_int64_of_string("0x597f299cfc657e2a"),
  Caml_format.caml_int64_of_string("0x5fcb6fab3ad6faec"),
  Caml_format.caml_int64_of_string("0x6c44198c4a475817")
];

var initial = /* array */[
  Caml_format.caml_int64_of_string("0x6a09e667f3bcc908"),
  Caml_format.caml_int64_of_string("0xbb67ae8584caa73b"),
  Caml_format.caml_int64_of_string("0x3c6ef372fe94f82b"),
  Caml_format.caml_int64_of_string("0xa54ff53a5f1d36f1"),
  Caml_format.caml_int64_of_string("0x510e527fade682d1"),
  Caml_format.caml_int64_of_string("0x9b05688c2b3e6c1f"),
  Caml_format.caml_int64_of_string("0x1f83d9abfb41bd6b"),
  Caml_format.caml_int64_of_string("0x5be0cd19137e2179")
];

function pad(msgBytes) {
  var size = {
    contents: msgBytes.length + 17 | 0
  };
  while(size.contents % 128 !== 0) {
    size.contents = size.contents + 1 | 0;
  };
  return Bytes.init(size.contents, (function (index) {
                var length = msgBytes.length;
                if (index < length) {
                  return Caml_bytes.get(msgBytes, index);
                } else if (index === length) {
                  return Char.chr(128);
                } else if (index === (size.contents - 1 | 0)) {
                  return Pervasives.char_of_int((length << 3));
                } else {
                  return Char.chr(0);
                }
              }));
}

function int64_of_bytes(input, j) {
  var v = Int64.zero;
  for(var i = 0; i <= 7; ++i){
    var tmp;
    var exit = 0;
    var some;
    try {
      some = Caml_bytes.get(input, i + j | 0);
      exit = 1;
    }
    catch (exn){
      tmp = Int64.zero;
    }
    if (exit === 1) {
      tmp = Caml_int64.of_int32(some & 255);
    }
    v = Caml_int64.add(Caml_int64.lsl_(v, 8), tmp);
  }
  return v;
}

function append(hash, value, offset) {
  for(var j = 0; j <= 7; ++j){
    hash[j + offset | 0] = Char.chr(Caml_int64.to_int32(Caml_int64.and_(Caml_int64.lsr_(value, 56 - (j << 3) | 0), /* int64 */{
                  hi: 0,
                  lo: 255
                })));
  }
  return /* () */0;
}

function make(message) {
  var messageBytes = Bytes.of_string(message);
  var message$1 = pad(messageBytes);
  var chunks = message$1.length / 128 | 0;
  var a = Caml_array.caml_array_get(initial, 0);
  var b = Caml_array.caml_array_get(initial, 1);
  var c = Caml_array.caml_array_get(initial, 2);
  var d = Caml_array.caml_array_get(initial, 3);
  var e = Caml_array.caml_array_get(initial, 4);
  var f = Caml_array.caml_array_get(initial, 5);
  var g = Caml_array.caml_array_get(initial, 6);
  var h = Caml_array.caml_array_get(initial, 7);
  for(var i = 0 ,i_finish = chunks - 1 | 0; i <= i_finish; ++i){
    var w = Caml_array.caml_make_vect(80, Int64.zero);
    for(var t = 0; t <= 15; ++t){
      Caml_array.caml_array_set(w, t, int64_of_bytes(message$1, (i << 7) + (t << 3) | 0));
    }
    for(var t$1 = 16; t$1 <= 79; ++t$1){
      Caml_array.caml_array_set(w, t$1, Caml_int64.add(Caml_int64.add(Caml_int64.add(sigma1(Caml_array.caml_array_get(w, t$1 - 2 | 0)), Caml_array.caml_array_get(w, t$1 - 7 | 0)), sigma0(Caml_array.caml_array_get(w, t$1 - 15 | 0))), Caml_array.caml_array_get(w, t$1 - 16 | 0)));
    }
    var originalA = a;
    var originalB = b;
    var originalC = c;
    var originalD = d;
    var originalE = e;
    var originalF = f;
    var originalG = g;
    var originalH = h;
    for(var t$2 = 0; t$2 <= 79; ++t$2){
      var temp1 = Caml_int64.add(Caml_int64.add(Caml_int64.add(Caml_int64.add(h, sum1(e)), change(e, f, g)), Caml_array.caml_array_get(words, t$2)), Caml_array.caml_array_get(w, t$2));
      var temp2 = Caml_int64.add(sum0(a), majority(a, b, c));
      h = g;
      g = f;
      f = e;
      e = Caml_int64.add(d, temp1);
      d = c;
      c = b;
      b = a;
      a = Caml_int64.add(temp1, temp2);
    }
    a = Caml_int64.add(originalA, a);
    b = Caml_int64.add(originalB, b);
    c = Caml_int64.add(originalC, c);
    d = Caml_int64.add(originalD, d);
    e = Caml_int64.add(originalE, e);
    f = Caml_int64.add(originalF, f);
    g = Caml_int64.add(originalG, g);
    h = Caml_int64.add(originalH, h);
  }
  var sha512raw = Bytes.make(64, Char.chr(0));
  append(sha512raw, a, 0);
  append(sha512raw, b, 8);
  append(sha512raw, c, 16);
  append(sha512raw, d, 24);
  append(sha512raw, e, 32);
  append(sha512raw, f, 40);
  append(sha512raw, g, 48);
  append(sha512raw, h, 56);
  var input = Bytes.to_string(sha512raw);
  var hex = "0123456789abcdef";
  var length = input.length;
  return $$String.init((length << 1), (function (index) {
                var $$char = Caml_string.get(input, index / 2 | 0);
                if (index % 2 === 0) {
                  return Caml_string.get(hex, ($$char >>> 4) & 15);
                } else {
                  return Caml_string.get(hex, $$char & 15);
                }
              }));
}

exports.make = make;
/* words Not a pure module */
