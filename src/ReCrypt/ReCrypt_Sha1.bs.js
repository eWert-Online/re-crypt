// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Int32 = require("bs-platform/lib/js/int32.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function rotl(x, n) {
  return (x << n) | (x >>> (64 - n | 0)) | 0;
}

function parity(x, y, z) {
  return x ^ y ^ z;
}

function f(t, x, y, z) {
  if (t >= 0 && t <= 19) {
    return x & y ^ Int32.lognot(x) & z;
  } else if (t >= 20 && t <= 39) {
    return parity(x, y, z);
  } else if (t >= 40 && t <= 59) {
    return x & y ^ x & z ^ y & z;
  } else if (t >= 60 && t <= 79) {
    return parity(x, y, z);
  } else {
    return 0;
  }
}

function append32(hash, value, offset) {
  for(var j = 0; j <= 3; ++j){
    Belt_Array.set(hash, j + offset | 0, (value >>> (24 - (j << 3) | 0)) & 255);
  }
  return hash;
}

var k = [
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1518500249,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  1859775393,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -1894007588,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514,
  -899497514
];

function pad(msg) {
  var size = (msg.length + 8 | 0) + 1 | 0;
  while(size % 64 !== 0) {
    size = size + 1 | 0;
  };
  var length = msg.length;
  var bytes = Belt_Array.makeBy(size, (function (index) {
          if (index < length) {
            return msg.charCodeAt(index) | 0;
          } else if (index === length) {
            return 128;
          } else {
            return 0;
          }
        }));
  var va = (length << 3);
  for(var i = 1; i <= 15; ++i){
    Belt_Array.set(bytes, bytes.length - i | 0, va & 255);
    va = (va >> 8);
  }
  return bytes;
}

function make(message) {
  var message$1 = pad(message);
  var chunks = ((message$1.length + 8 | 0) >> 6);
  var a = {
    contents: 1732584193
  };
  var b = {
    contents: -271733879
  };
  var c = {
    contents: -1732584194
  };
  var d = {
    contents: 271733878
  };
  var e = {
    contents: -1009589776
  };
  for(var i = 0; i < chunks; ++i){
    var w = Belt_Array.make(80, 0);
    for(var t = 0; t <= 15; ++t){
      var result = (Belt_Option.getWithDefault(Belt_Array.get(message$1, (i << 6) + (t << 2) | 0), 0) << 24) & -16777216 | (Belt_Option.getWithDefault(Belt_Array.get(message$1, ((i << 6) + (t << 2) | 0) + 1 | 0), 0) << 16) & 16711680 | (Belt_Option.getWithDefault(Belt_Array.get(message$1, ((i << 6) + (t << 2) | 0) + 2 | 0), 0) << 8) & 65280 | Belt_Option.getWithDefault(Belt_Array.get(message$1, ((i << 6) + (t << 2) | 0) + 3 | 0), 0) & 255;
      Belt_Array.set(w, t, result);
    }
    for(var t$1 = 16; t$1 <= 79; ++t$1){
      var t3 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 3 | 0), 0);
      var t8 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 8 | 0), 0);
      var t14 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 14 | 0), 0);
      var t16 = Belt_Option.getWithDefault(Belt_Array.get(w, t$1 - 16 | 0), 0);
      var result$1 = rotl(t3 ^ t8 ^ t14 ^ t16, 1);
      Belt_Array.set(w, t$1, result$1);
    }
    var originalA = a.contents;
    var originalB = b.contents;
    var originalC = c.contents;
    var originalD = d.contents;
    var originalE = e.contents;
    Belt_Array.forEachWithIndex(k, (function(w){
        return function (t, k) {
          var temp = (((rotl(a.contents, 5) + f(t, b.contents, c.contents, d.contents) | 0) + e.contents | 0) + k | 0) + Belt_Option.getWithDefault(Belt_Array.get(w, t), 0) | 0;
          e.contents = d.contents;
          d.contents = c.contents;
          c.contents = rotl(b.contents, 30);
          b.contents = a.contents;
          a.contents = temp;
          
        }
        }(w)));
    a.contents = originalA + a.contents | 0;
    b.contents = originalB + b.contents | 0;
    c.contents = originalC + c.contents | 0;
    d.contents = originalD + d.contents | 0;
    e.contents = originalE + e.contents | 0;
  }
  var input = Belt_Array.reduce(append32(append32(append32(append32(append32(Belt_Array.make(20, 0), a.contents, 0), b.contents, 4), c.contents, 8), d.contents, 12), e.contents, 16), "", (function (acc, curr) {
          return acc + String.fromCharCode(curr);
        }));
  var hex = "0123456789abcdef";
  return Belt_Array.reduce(input.split(""), "", (function (acc, curr) {
                var charCode = curr.charCodeAt(0) | 0;
                return acc + (hex.charAt((charCode >>> 4) & 15) + hex.charAt(charCode & 15));
              }));
}

exports.make = make;
/* No side effect */
